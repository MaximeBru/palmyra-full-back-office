type Author {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  pseudo: String
  photo: UploadFile
  titlePresentation: String
  presentation: String
  nom: String
  prenom: String
  affectation: String
  infos(sort: String, limit: Int, start: Int, where: JSON): [Infos]
  posts(sort: String, limit: Int, start: Int, where: JSON): [Posts]
}

type AuthorAggregator {
  count: Int
}

type AuthorConnection {
  values: [Author]
  groupBy: AuthorGroupBy
  aggregate: AuthorAggregator
}

type AuthorConnection_id {
  key: ID
  connection: AuthorConnection
}

type AuthorConnectionAffectation {
  key: String
  connection: AuthorConnection
}

type AuthorConnectionCreatedAt {
  key: DateTime
  connection: AuthorConnection
}

type AuthorConnectionNom {
  key: String
  connection: AuthorConnection
}

type AuthorConnectionPhoto {
  key: ID
  connection: AuthorConnection
}

type AuthorConnectionPrenom {
  key: String
  connection: AuthorConnection
}

type AuthorConnectionPresentation {
  key: String
  connection: AuthorConnection
}

type AuthorConnectionPseudo {
  key: String
  connection: AuthorConnection
}

type AuthorConnectionTitlePresentation {
  key: String
  connection: AuthorConnection
}

type AuthorConnectionUpdatedAt {
  key: DateTime
  connection: AuthorConnection
}

type AuthorGroupBy {
  _id: [AuthorConnection_id]
  createdAt: [AuthorConnectionCreatedAt]
  updatedAt: [AuthorConnectionUpdatedAt]
  pseudo: [AuthorConnectionPseudo]
  photo: [AuthorConnectionPhoto]
  titlePresentation: [AuthorConnectionTitlePresentation]
  presentation: [AuthorConnectionPresentation]
  nom: [AuthorConnectionNom]
  prenom: [AuthorConnectionPrenom]
  affectation: [AuthorConnectionAffectation]
}

input AuthorInput {
  pseudo: String
  photo: ID
  titlePresentation: String
  presentation: String
  nom: String
  prenom: String
  infos: [ID]
  posts: [ID]
  affectation: String
}

input createAuthorInput {
  data: AuthorInput
}

type createAuthorPayload {
  author: Author
}

input createInfosInput {
  data: InfosInput
}

type createInfosPayload {
  info: Infos
}

input createPostsInput {
  data: PostsInput
}

type createPostsPayload {
  post: Posts
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteAuthorInput {
  where: InputID
}

type deleteAuthorPayload {
  author: Author
}

input deleteInfosInput {
  where: InputID
}

type deleteInfosPayload {
  info: Infos
}

input deletePostsInput {
  where: InputID
}

type deletePostsPayload {
  post: Posts
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related: [ID]
}

type Infos {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  image: UploadFile
  title: String
  date: DateTime
  description: String
  metaDescription: String
  metaTitle: String
  newsBody: String
  subTitle: String
  subBody: String
  author: Author
}

type InfosAggregator {
  count: Int
}

type InfosConnection {
  values: [Infos]
  groupBy: InfosGroupBy
  aggregate: InfosAggregator
}

type InfosConnection_id {
  key: ID
  connection: InfosConnection
}

type InfosConnectionAuthor {
  key: ID
  connection: InfosConnection
}

type InfosConnectionCreatedAt {
  key: DateTime
  connection: InfosConnection
}

type InfosConnectionDate {
  key: DateTime
  connection: InfosConnection
}

type InfosConnectionDescription {
  key: String
  connection: InfosConnection
}

type InfosConnectionImage {
  key: ID
  connection: InfosConnection
}

type InfosConnectionMetaDescription {
  key: String
  connection: InfosConnection
}

type InfosConnectionMetaTitle {
  key: String
  connection: InfosConnection
}

type InfosConnectionNewsBody {
  key: String
  connection: InfosConnection
}

type InfosConnectionSubBody {
  key: String
  connection: InfosConnection
}

type InfosConnectionSubTitle {
  key: String
  connection: InfosConnection
}

type InfosConnectionTitle {
  key: String
  connection: InfosConnection
}

type InfosConnectionUpdatedAt {
  key: DateTime
  connection: InfosConnection
}

type InfosGroupBy {
  _id: [InfosConnection_id]
  createdAt: [InfosConnectionCreatedAt]
  updatedAt: [InfosConnectionUpdatedAt]
  image: [InfosConnectionImage]
  title: [InfosConnectionTitle]
  date: [InfosConnectionDate]
  description: [InfosConnectionDescription]
  metaDescription: [InfosConnectionMetaDescription]
  metaTitle: [InfosConnectionMetaTitle]
  newsBody: [InfosConnectionNewsBody]
  subTitle: [InfosConnectionSubTitle]
  subBody: [InfosConnectionSubBody]
  author: [InfosConnectionAuthor]
}

input InfosInput {
  image: ID
  title: String
  date: DateTime
  description: String
  metaDescription: String
  metaTitle: String
  newsBody: String
  subTitle: String
  subBody: String
  author: ID
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = Author | createAuthorPayload | updateAuthorPayload | deleteAuthorPayload | AuthorConnection | AuthorAggregator | AuthorGroupBy | AuthorConnection_id | AuthorConnectionCreatedAt | AuthorConnectionUpdatedAt | AuthorConnectionPseudo | AuthorConnectionPhoto | AuthorConnectionTitlePresentation | AuthorConnectionPresentation | AuthorConnectionNom | AuthorConnectionPrenom | AuthorConnectionAffectation | Infos | createInfosPayload | updateInfosPayload | deleteInfosPayload | InfosConnection | InfosAggregator | InfosGroupBy | InfosConnection_id | InfosConnectionCreatedAt | InfosConnectionUpdatedAt | InfosConnectionImage | InfosConnectionTitle | InfosConnectionDate | InfosConnectionDescription | InfosConnectionMetaDescription | InfosConnectionMetaTitle | InfosConnectionNewsBody | InfosConnectionSubTitle | InfosConnectionSubBody | InfosConnectionAuthor | Posts | createPostsPayload | updatePostsPayload | deletePostsPayload | PostsConnection | PostsAggregator | PostsGroupBy | PostsConnection_id | PostsConnectionCreatedAt | PostsConnectionUpdatedAt | PostsConnectionTitle | PostsConnectionImage | PostsConnectionDescription | PostsConnectionSubtitle | PostsConnectionSubimage | PostsConnectionMetadescription | PostsConnectionMetatitle | PostsConnectionPostbody | PostsConnectionAuthor | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createAuthor(input: createAuthorInput): createAuthorPayload
  updateAuthor(input: updateAuthorInput): updateAuthorPayload
  deleteAuthor(input: deleteAuthorInput): deleteAuthorPayload
  createInfos(input: createInfosInput): createInfosPayload
  updateInfos(input: updateInfosInput): updateInfosPayload
  deleteInfos(input: deleteInfosInput): deleteInfosPayload
  createPosts(input: createPostsInput): createPostsPayload
  updatePosts(input: updatePostsInput): updatePostsPayload
  deletePosts(input: deletePostsInput): deletePostsPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Posts {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  image: UploadFile
  description: String
  subtitle: String
  subimage: UploadFile
  metadescription: String
  metatitle: String
  postbody: String
  author: Author
}

type PostsAggregator {
  count: Int
}

type PostsConnection {
  values: [Posts]
  groupBy: PostsGroupBy
  aggregate: PostsAggregator
}

type PostsConnection_id {
  key: ID
  connection: PostsConnection
}

type PostsConnectionAuthor {
  key: ID
  connection: PostsConnection
}

type PostsConnectionCreatedAt {
  key: DateTime
  connection: PostsConnection
}

type PostsConnectionDescription {
  key: String
  connection: PostsConnection
}

type PostsConnectionImage {
  key: ID
  connection: PostsConnection
}

type PostsConnectionMetadescription {
  key: String
  connection: PostsConnection
}

type PostsConnectionMetatitle {
  key: String
  connection: PostsConnection
}

type PostsConnectionPostbody {
  key: String
  connection: PostsConnection
}

type PostsConnectionSubimage {
  key: ID
  connection: PostsConnection
}

type PostsConnectionSubtitle {
  key: String
  connection: PostsConnection
}

type PostsConnectionTitle {
  key: String
  connection: PostsConnection
}

type PostsConnectionUpdatedAt {
  key: DateTime
  connection: PostsConnection
}

type PostsGroupBy {
  _id: [PostsConnection_id]
  createdAt: [PostsConnectionCreatedAt]
  updatedAt: [PostsConnectionUpdatedAt]
  title: [PostsConnectionTitle]
  image: [PostsConnectionImage]
  description: [PostsConnectionDescription]
  subtitle: [PostsConnectionSubtitle]
  subimage: [PostsConnectionSubimage]
  metadescription: [PostsConnectionMetadescription]
  metatitle: [PostsConnectionMetatitle]
  postbody: [PostsConnectionPostbody]
  author: [PostsConnectionAuthor]
}

input PostsInput {
  title: String
  image: ID
  description: String
  subtitle: String
  subimage: ID
  metadescription: String
  metatitle: String
  postbody: String
  author: ID
}

type Query {
  author(id: ID!): Author
  authors(sort: String, limit: Int, start: Int, where: JSON): [Author]
  authorsConnection(sort: String, limit: Int, start: Int, where: JSON): AuthorConnection
  info(id: ID!): Infos
  infos(sort: String, limit: Int, start: Int, where: JSON): [Infos]
  infosConnection(sort: String, limit: Int, start: Int, where: JSON): InfosConnection
  post(id: ID!): Posts
  posts(sort: String, limit: Int, start: Int, where: JSON): [Posts]
  postsConnection(sort: String, limit: Int, start: Int, where: JSON): PostsConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateAuthorInput {
  where: InputID
  data: AuthorInput
}

type updateAuthorPayload {
  author: Author
}

input updateInfosInput {
  where: InputID
  data: InfosInput
}

type updateInfosPayload {
  info: Infos
}

input updatePostsInput {
  where: InputID
  data: PostsInput
}

type updatePostsPayload {
  post: Posts
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""
The `Upload` scalar type represents a file upload promise that resolves an
object containing `stream`, `filename`, `mimetype` and `encoding`.
"""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
}

input UserInput {
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
